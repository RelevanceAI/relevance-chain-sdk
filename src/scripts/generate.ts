import { promises as fs } from "node:fs";
import path from "node:path";

import type { JSONSchema4 } from "json-schema";
import { compile as _compile } from "json-schema-to-typescript";
import { pascalCase } from "change-case";

const fetchTransformations = async (): Promise<any[]> => {
  const response = await fetch(
    "https://api-1e3042.stack.tryrelevance.com/latest/studios/transformations/list"
  );
  const json = await response.json();
  return json.results;
};

const compile = async (schema: JSONSchema4, name: string) => {
  return _compile(schema, name, {
    bannerComment: "",
    strictIndexSignatures: true,
    unknownAny: false,
  });
};

const main = async () => {
  const transformations = await fetchTransformations();
  const transformationTypes = await Promise.all(
    transformations.map(async (transformation: any) => {
      const id = transformation.transformation_id;
      const pascalCasedName = pascalCase(id);
      const inputTypeName = `${pascalCasedName}Input`;
      const outputTypeName = `${pascalCasedName}Output`;
      const [inputTs, outputTs] = await Promise.all([
        compile(transformation.input_schema, inputTypeName),
        compile(transformation.output_schema, outputTypeName),
      ]);
      return {
        input: inputTs,
        inputTypeName,
        output: outputTs,
        outputTypeName,
        id,
        pascalCasedName,
      };
    })
  );

  const builtinTransformationsType = `
export type BuiltinTransformations = {
${transformationTypes
  .map(
    (types) =>
      `  ${types.id}: { input: ${types.inputTypeName}, output: ${types.outputTypeName} }`
  )
  .join(`\n`)}
}`.trim();

  const outputToWrite = `
/** eslint-disable */
/**
 * 
 * DON'T EDIT THIS FILE MANUALLY.
 * IT IS GENERATED BY src/scripts/generate.ts
 * 
 */

${transformationTypes
  .flatMap((types) => [types.input, types.output])
  .join(`\n`)}
${builtinTransformationsType}
`.trim();

  await fs.writeFile(
    path.join(process.cwd(), "src", "generated", "transformation-types.ts"),
    outputToWrite
  );
};

main();
