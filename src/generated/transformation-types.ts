/** eslint-disable */
/**
 * 
 * DON'T EDIT THIS FILE MANUALLY.
 * IT IS GENERATED BY src/scripts/generate.ts
 * 
 */

export interface PromptCompletionInput {
  prompt: string;
  model?: string;
  history?: {
    role: "user" | "ai";
    message: string;
  }[];
  temperature?: number;
}

export interface PromptCompletionOutput {
  answer: string;
  prompt: string;
}

export interface ApiCallInput {
  url: string;
  method: "GET" | "POST" | "PUT" | "HEAD" | "PATCH" | "DELETE" | "OPTIONS";
  headers?: {
    [k: string]: any | undefined;
  };
  body?: {
    [k: string]: any | undefined;
  };
  response_type?: "string" | "json" | "arrayBuffer" | "blob";
}

export interface ApiCallOutput {
  response_body: any;
  status: number;
}

export interface JsCodeTransformationInput {
  code: string;
}

export interface JsCodeTransformationOutput {
  /**
   * Return value of provided code
   */
  transformed: {
    [k: string]: any | undefined;
  };
  /**
   * Duration of provided code in milliseconds
   */
  duration: number;
  [k: string]: any | undefined;
}

export interface SearchInput {
  dataset_id: string;
  query: string;
  vector_field: string;
  /**
   * The model name to use.
   */
  model:
    | "image_text"
    | "text_image"
    | "all-mpnet-base-v2"
    | "clip-vit-b-32-image"
    | "clip-vit-b-32-text"
    | "clip-vit-l-14-image"
    | "clip-vit-l-14-text"
    | "sentence-transformers"
    | "text-embedding-ada-002"
    | "cohere-small"
    | "cohere-large"
    | "cohere-multilingual-22-12";
  content_field?: string;
  page_size?: number;
}

export interface SearchOutput {
  results: (
    | string
    | {
        [k: string]: any | undefined;
      }
  )[];
  [k: string]: any | undefined;
}

export interface SearchArrayInput {
  array: string[];
  query: string;
  page_size?: number;
}

export interface SearchArrayOutput {
  results: string[];
}

export interface BulkUpdateInput {
  dataset_id: string;
  documents: any[];
  ingest_in_background?: boolean;
}

export interface BulkUpdateOutput {
  /**
   * Number of successfully processed documents.
   */
  inserted: number;
  /**
   * Information about documents that were not processed successfully.
   */
  failed_documents: {
    /**
     * _id field of unprocessed document.
     */
    _id?: {
      [k: string]: any | undefined;
    };
    error?: {
      /**
       * http status code of individual document insertion operation.
       */
      status?: number;
      /**
       * body response of individual document insertion operation.
       */
      body?: string;
    };
    [k: string]: any | undefined;
  }[];
  [k: string]: any | undefined;
}

export interface GenerateVectorEmbeddingInput {
  input: string;
  /**
   * The model name to use.
   */
  model:
    | "image_text"
    | "text_image"
    | "all-mpnet-base-v2"
    | "clip-vit-b-32-image"
    | "clip-vit-b-32-text"
    | "clip-vit-l-14-image"
    | "clip-vit-l-14-text"
    | "sentence-transformers"
    | "text-embedding-ada-002"
    | "cohere-small"
    | "cohere-large"
    | "cohere-multilingual-22-12";
}

export interface GenerateVectorEmbeddingOutput {
  vector: any[];
  [k: string]: any | undefined;
}

export interface RedisSearchInput {
  index: string;
  query: string;
  vector_field: string;
  /**
   * The model name to use.
   */
  model:
    | "image_text"
    | "text_image"
    | "all-mpnet-base-v2"
    | "clip-vit-b-32-image"
    | "clip-vit-b-32-text"
    | "clip-vit-l-14-image"
    | "clip-vit-l-14-text"
    | "sentence-transformers"
    | "text-embedding-ada-002"
    | "cohere-small"
    | "cohere-large"
    | "cohere-multilingual-22-12";
  page_size?: number;
}

export interface RedisSearchOutput {
  results: any[];
  [k: string]: any | undefined;
}

export interface RedisInsertInput {
  key: string;
  document: {
    [k: string]: any | undefined;
  };
  wait?: boolean;
}

export interface RedisInsertOutput {
  inserted: number;
  [k: string]: any | undefined;
}

export interface JoinArrayInput {
  array: string[];
  sep: string;
}

export interface JoinArrayOutput {
  text: string;
}

export interface PdfToTextInput {
  pdf_url: string;
}

export interface PdfToTextOutput {
  text: string;
}

export interface AudioToTextInput {
  audio_url: string;
}

export interface AudioToTextOutput {
  text: string;
}

export interface MarkdownInput {
  markdown: string;
}

export interface MarkdownOutput {
  [k: string]: any | undefined;
}

export interface ToJsonInput {
  text: string;
}

export interface ToJsonOutput {
  output: any;
}

export interface ExportToFileInput {
  data: {
    [k: string]: any | undefined;
  };
  extension?: string;
}

export interface ExportToFileOutput {
  export_url: string;
}

export interface ObjectKeyFilterInput {
  needle: any[] | string;
  haystack: {
    [k: string]: any | undefined;
  };
}

export interface ObjectKeyFilterOutput {
  filtered: any;
}

export interface RegexInput {
  regex: string;
  string: string;
}

export interface RegexOutput {
  match: any;
  found?: boolean;
}

export interface RunChainInput {
  studio_id: string;
  project?: string;
  version?: string;
  params: {
    [k: string]: any | undefined;
  };
}

export interface RunChainOutput {
  output: {
    [k: string]: any | undefined;
  };
  state?: {
    [k: string]: any | undefined;
  };
  /**
   * Status of the workflow. Used for knowing when to send an email notification.
   */
  status: "complete" | "inprogress" | "failed" | "cancelled";
  errors: {
    body?: string;
    [k: string]: any | undefined;
  }[];
  executionTime: number;
}

export interface TriggerWorkflowInput {
  workflow_id: string;
  dataset_id: string;
  params: {
    [k: string]: any | undefined;
  };
}

export interface TriggerWorkflowOutput {
  job_id: string;
  [k: string]: any | undefined;
}

export interface SplitTextInput {
  text: string;
  method: "tokens" | "separator";
  num_tokens?: number;
  sep?: string;
}

export interface SplitTextOutput {
  chunks: string[];
  [k: string]: any | undefined;
}

export interface CombineArrayInput {
  array?: any[];
  method?: "concat";
  [k: string]: any | undefined;
}

export interface CombineArrayOutput {
  combined: any;
  [k: string]: any | undefined;
}

export interface UploadFileS3Input {
  blob: any;
  extension?: string;
  [k: string]: any | undefined;
}

export interface UploadFileS3Output {
  url: string;
  [k: string]: any | undefined;
}

export interface AnalyseImageInput {
  image_url: string;
  prompt: string;
}

export interface AnalyseImageOutput {
  output: string;
}

export type BuiltinTransformations = {
  prompt_completion: { input: PromptCompletionInput, output: PromptCompletionOutput }
  api_call: { input: ApiCallInput, output: ApiCallOutput }
  js_code_transformation: { input: JsCodeTransformationInput, output: JsCodeTransformationOutput }
  search: { input: SearchInput, output: SearchOutput }
  search_array: { input: SearchArrayInput, output: SearchArrayOutput }
  bulk_update: { input: BulkUpdateInput, output: BulkUpdateOutput }
  generate_vector_embedding: { input: GenerateVectorEmbeddingInput, output: GenerateVectorEmbeddingOutput }
  redis_search: { input: RedisSearchInput, output: RedisSearchOutput }
  redis_insert: { input: RedisInsertInput, output: RedisInsertOutput }
  join_array: { input: JoinArrayInput, output: JoinArrayOutput }
  pdf_to_text: { input: PdfToTextInput, output: PdfToTextOutput }
  audio_to_text: { input: AudioToTextInput, output: AudioToTextOutput }
  markdown: { input: MarkdownInput, output: MarkdownOutput }
  to_json: { input: ToJsonInput, output: ToJsonOutput }
  export_to_file: { input: ExportToFileInput, output: ExportToFileOutput }
  object_key_filter: { input: ObjectKeyFilterInput, output: ObjectKeyFilterOutput }
  regex: { input: RegexInput, output: RegexOutput }
  run_chain: { input: RunChainInput, output: RunChainOutput }
  trigger_workflow: { input: TriggerWorkflowInput, output: TriggerWorkflowOutput }
  split_text: { input: SplitTextInput, output: SplitTextOutput }
  combine_array: { input: CombineArrayInput, output: CombineArrayOutput }
  upload_file_s3: { input: UploadFileS3Input, output: UploadFileS3Output }
  analyse_image: { input: AnalyseImageInput, output: AnalyseImageOutput }
}